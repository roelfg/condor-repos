# Copyright 2015-2021 Karlsruhe Institute of Technology KIT
#
# SPDX-License-Identifier: GPL-3.0-or-later

# GridKa HTCondor configuration:
# Authentication and Authorization

# See:
#  http://research.cs.wisc.edu/htcondor/manual/current/3_6Security.html

# Which features we require for communication
# Always use authentication unless specifically disabled
SEC_DEFAULT_AUTHENTICATION   = REQUIRED
SEC_DEFAULT_ENCRYPTION       = PREFERRED
SEC_DEFAULT_INTEGRITY        = PREFERRED
SEC_DEFAULT_NEGOTIATION      = REQUIRED

### Clients (User or Daemon) should follow the Server/Daemon preference
SEC_CLIENT_AUTHENTICATION    = REQUIRED
SEC_CLIENT_ENCRYPTION        = PREFERRED
SEC_CLIENT_INTEGRITY         = PREFERRED

### Same for reading
SEC_READ_AUTHENTICATION      = REQUIRED
SEC_READ_ENCRYPTION          = PREFERRED
SEC_READ_INTEGRITY           = PREFERRED

# -- How the identity is verified --
# GSI       - X509 host/user certificates
# SSL       - similar to GSI
# KERBEROS
# PASSWORD  - daemon-to-daemon only, shared secret of the pool
# FS        - random file ownership, aka "touch that file"
# FS_REMOTE - like FS, but in a configurable location
# NTSSPI    - Windows only
# CLAIMTOBE - trust the claim of the other side - DO NOT USE!
# ANONYMOUS - skip authentication - DO NOT USE!
# ----------------------------------
# Accept any authentication method that is safe
# These methods are only ever used if properly configured
#SEC_DEFAULT_AUTHENTICATION_METHODS = PASSWORD,GSI
SEC_DEFAULT_AUTHENTICATION_METHODS = GSI

# Explicitly allow schedd <-> startd password authentication
# After a job match, a NEW, individual password is created AFTER regular authentication succeeded
# This severely reduces the overhead of authentication
SEC_ENABLE_MATCH_PASSWORD_AUTHENTICATION = TRUE
#SEC_PASSWORD_FILE = $(LOCAL_CONFIG_DIR)/security/pool_pw.crd

### -- Identities

# WHO is allowed to do WHAT?

# Condor maps authentication information to Identities
# Format is: username@domain/hostname
# username : an individual user, e.g. mfischer
# domain   : the realm people act from, e.g. gridka.de
# hostname : the machine a specific entity acts from, e.g. arc-1-kit.gridka.de
# One can use full format, or either of username@domain OR hostname
# There may be a single * wildcard in the username+domain and hostname

# some identity snippets for reference
GRIDKA_DOMAIN = *gridka.de

# The domain in which identities are consistent
# e.g. alice157 is the same user on all hosts with same UID_DOMAIN
#UID_DOMAIN = physik.uni-karlsruhe.de
#UID_DOMAIN = ekp.kit.edu
UID_DOMAIN = uni-bonn.de

# Who may start/stop/restart/userprio/... via Condor commsnds
ALLOW_ADMINISTRATOR = condor@$(GRIDKA_DOMAIN)/$(CONDOR_HOST), condor_pool@$(GRIDKA_DOMAIN)/$(CONDOR_HOST), cobald@$(UID_DOMAIN), cobald@$(UID_DOMAIN)/$(UID_DOMAIN)
# Who may edit via condor_config_val - please prefer editing the configs!
ALLOW_CONFIG = $(ALLOW_ADMINISTRATOR)
# Who may control condor locally?
ALLOW_OWNER = condor@*/$(FULL_HOSTNAME), condor@*/$(IP_ADDRESS), $(ALLOW_ADMINISTRATOR)
# Who may act as a daemon?
ALLOW_DAEMON = condor@$(GRIDKA_DOMAIN), condor_pool@$(GRIDKA_DOMAIN), submit-side@matchsession, execute-side@matchsession, cobald@$(UID_DOMAIN), cobald@$(UID_DOMAIN)/$(UID_DOMAIN)
# Who may query information from the system?
ALLOW_READ = $(GRIDKA_DOMAIN)
# Who may add information to the system?
ALLOW_WRITE = $(GRIDKA_DOMAIN), *condor@*/$(FULL_HOSTNAME), /C=DE/O=GermanGrid/OU=KIT/CN=pps-arc-1-kit.gridka.de, /C=DE/O=GermanGrid/OU=KIT/CN=cloud-htcondor-ce-1-kit.gridka.de, /C=DE/O=GermanGrid/OU=KIT/CN=cloud-htcondor-ce-2-kit.gridka.de, /C=DE/O=GermanGrid/OU=UniBonn/CN=Robot - Bonn COBalD TARDIS Drone Service
# Who negotiates slots and jobs?
ALLOW_NEGOTIATOR = condor@$(GRIDKA_DOMAIN)/$(CONDOR_HOST), condor_pool@$(GRIDKA_DOMAIN)/$(CONDOR_HOST)
