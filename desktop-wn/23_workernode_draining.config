# WARNING: This file is managed by Puppet

# Determine how many hours we can safely backfill if IMMEDIATE_DRAIN is activated (determined by last existing job end time).
BackfillableMaxRuntimeHours_IMMEDIATE_DRAIN = ifThenElse((MY.IMMEDIATE_DRAIN =?= True) && isInteger(MY.MaxLatestJobEndTime),Max({(MY.MaxLatestJobEndTime-time())/60/60-1, 0}),168)
# Determine how many hours we can safely backfill if TIMED_DRAIN is activated, and DRAIN_TARGET_TIME is defined by administrator.
BackfillableMaxRuntimeHours_TIMED_DRAIN = ifThenElse((MY.TIMED_DRAIN =?= True) && isInteger(MY.DRAIN_TARGET_TIME),Max({(MY.DRAIN_TARGET_TIME-time())/60/60-1, 0}),168)
# Take the Min of both times as actual "safely backfillable hours".
# Note that this allows partial drain of nodes by setting the DRAIN_TARGET_TIME lower than the remaining runtime of the longest running job.
BackfillableMaxRuntimeHours = Min({BackfillableMaxRuntimeHours_IMMEDIATE_DRAIN, BackfillableMaxRuntimeHours_TIMED_DRAIN})

# Export attributes used in drain control.
STARTD_ATTRS = $(STARTD_ATTRS), IMMEDIATE_DRAIN, TIMED_DRAIN, DRAIN_TARGET_TIME, DRAIN_TARGET_DATE, DRAIN_REASONS, BackfillableMaxRuntimeHours_IMMEDIATE_DRAIN, BackfillableMaxRuntimeHours_TIMED_DRAIN, BackfillableMaxRuntimeHours

# Adapt START expression: Enforce backfilling limits are enforced for all jobs if activated as outlined above, and job defines MaxRuntimeHours (will be enforced on schedd).
START = ( $(START) ) && ( MY.BackfillableMaxRuntimeHours >= ifThenElse(isUndefined(TARGET.MaxRuntimeHours),168,TARGET.MaxRuntimeHours) )

# Explicitly export attributes used by reboot control.
STARTD_ATTRS = $(STARTD_ATTRS), NODE_IS_HEALTHY, NODE_HEALTH, MARKED_FOR_REBOOT, STAGGERED_REBOOT_DRAIN, DRAIN_FOR_REBOOT_AFTER, DRAIN_FOR_REBOOT_AFTER_DATE, NODE_REBOOT_REASONS, NODE_REBOOT_ACTION

